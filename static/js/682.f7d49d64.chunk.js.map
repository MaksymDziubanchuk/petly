{"version":3,"file":"static/js/682.f7d49d64.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/userFolder/AuthForm/auth-form.module.scss?4595","webpack://react-homework-template/./src/components/headerFolder/Nav/GoogleNav/google-nav.module.scss?2037","components/headerFolder/Nav/GoogleNav/GoogleNav.jsx","components/userFolder/AuthForm/AuthForm.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"button__primary_not_main\":\"auth-form_button__primary_not_main__8P-fg\",\"button__primary_main\":\"auth-form_button__primary_main__MnTkE\",\"button__secondary\":\"auth-form_button__secondary__KPh8C\",\"button__secondary_active\":\"auth-form_button__secondary_active__NYsjk\",\"button__learn\":\"auth-form_button__learn__aF1Az\",\"form__input_container\":\"auth-form_form__input_container__aA0wO\",\"form__label\":\"auth-form_form__label__kvu1f\",\"form__input\":\"auth-form_form__input__PCyqB\",\"form__input_phone\":\"auth-form_form__input_phone__3+Prq\",\"form__input_number\":\"auth-form_form__input_number__ad5x5\",\"form__input__password_show\":\"auth-form_form__input__password_show__m0iHa\",\"error__mesage\":\"auth-form_error__mesage__60rvQ\",\"form__login__input\":\"auth-form_form__login__input__goTNO\",\"coordination__box\":\"auth-form_coordination__box__IaRI-\",\"coordination__box_input\":\"auth-form_coordination__box_input__45QT5\",\"coordination__box_title\":\"auth-form_coordination__box_title__Ub9P3\",\"coordination__box_link\":\"auth-form_coordination__box_link__4TUNL\",\"form__button\":\"auth-form_form__button__-DMkC\",\"form__back_button\":\"auth-form_form__back_button__g2+wq\",\"form__description\":\"auth-form_form__description__SN4bk\",\"form__description_reset\":\"auth-form_form__description_reset__eFgSI\",\"form__description_recover\":\"auth-form_form__description_recover__H2YZU\",\"description__nav\":\"auth-form_description__nav__UAxeo\",\"loading__modal\":\"auth-form_loading__modal__j9v7f\"};","// extracted by mini-css-extract-plugin\nexport default {\"googleBox\":\"google-nav_googleBox__pLbWW\",\"googleBox__title\":\"google-nav_googleBox__title__fq7Z0\",\"linkBox\":\"google-nav_linkBox__Z0cDd\",\"googleDecs\":\"google-nav_googleDecs__GGIZo\",\"googleLink\":\"google-nav_googleLink__A-F5w\"};","import SvgInsert from '../../../utilsFolder/Svg/Svg'\nimport scss from './google-nav.module.scss'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { setMenuActive } from 'redux/slices/menuSlice'\nimport { useTranslation } from 'react-i18next'\n\nconst { REACT_APP_BASE_URL } = process.env\n\nconst GoogleAuth = () => {\n    const isActive = useSelector(state => state.menu.menuActive)\n    const dispatch = useDispatch()\n    const { t } = useTranslation()\n\n    return (\n        <div className={scss.googleBox}>\n            <div className={scss.googleBox__title}>\n                <p className={scss.googleDecs}>{t('AuthForm.google')}</p>\n            </div>\n            <div className={scss.linkBox}>\n                {isActive === true ? (\n                    <>\n                        <a\n                            href={`${REACT_APP_BASE_URL}/api/auth/google`}\n                            className={scss.googleLink}\n                            onClick={() => dispatch(setMenuActive(!isActive))}\n                        >\n                            <SvgInsert id=\"icon-google\" />\n                        </a>\n                        <a\n                            href={`${REACT_APP_BASE_URL}/api/auth/facebook`}\n                            className={scss.googleLink}\n                            onClick={() => dispatch(setMenuActive(!isActive))}\n                        >\n                            <SvgInsert id=\"facebook\" />\n                        </a>\n                    </>\n                ) : (\n                    <>\n                        <a\n                            href={`${REACT_APP_BASE_URL}/api/auth/google`}\n                            className={scss.googleLink}\n                        >\n                            <SvgInsert id=\"icon-google\" />\n                        </a>\n                        <a\n                            href={`${REACT_APP_BASE_URL}/api/auth/facebook`}\n                            className={scss.googleLink}\n                            onClick={() => dispatch(setMenuActive(!isActive))}\n                        >\n                            <SvgInsert id=\"facebook\" />\n                        </a>\n                    </>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default GoogleAuth\n","import scss from './auth-form.module.scss'\n\nimport { useDispatch, useSelector } from 'react-redux'\nimport operations from '../../../redux/operations/userOperations'\nimport GoogleAuth from '../../headerFolder/Nav/GoogleNav/GoogleNav'\n\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\nimport Loader from 'components/utilsFolder/Loader/Loader'\nimport * as Yup from 'yup'\nimport { useEffect, useState } from 'react'\nimport { Notify } from 'notiflix/build/notiflix-notify-aio'\nimport { NavLink, useLocation, useNavigate, useParams } from 'react-router-dom'\nimport SvgInsert from 'components/utilsFolder/Svg/Svg'\nimport cities from '../../../helpers/ua.json'\nimport { useTranslation } from 'react-i18next'\n\nconst AuthForm = () => {\n    const [stepOne, setStepOne] = useState(true)\n    const [onShowPassword, setOnShowPassword] = useState(false)\n    const [onShowConfirmPassword, setOnShowConfirmPassword] = useState(false)\n    const [coordination, setCoordination] = useState(false)\n    const [valuePassword, setValuePassword] = useState('')\n    const [valueConfirmPassword, setValueConfirmPassword] = useState('')\n    const [tokenForResetPassword, setTokenForResetPassword] = useState('')\n    const location = useLocation()\n    const page = location.pathname\n    const { token } = useParams()\n    const navigate = useNavigate()\n    const { t } = useTranslation()\n\n    useEffect(() => {\n        if (\n            page !== '/register' &&\n            page !== '/login' &&\n            page !== '/verify' &&\n            page !== '/reset-password'\n        ) {\n            setTokenForResetPassword(token)\n        }\n    }, [page, token])\n\n    const handleChangePassword = e => {\n        switch (e.target.name) {\n            case 'password':\n                setValuePassword(e.target.value)\n                break\n            case 'passwordConfirm':\n                setValueConfirmPassword(e.target.value)\n                break\n            case 'coordination':\n                setCoordination(e.target.checked)\n                break\n            default:\n                return\n        }\n    }\n\n    const loading = useSelector(state => state.auth.loading)\n    const dispatch = useDispatch()\n\n    const onLogin = data => {\n        dispatch(operations.login(data))\n    }\n\n    const initialValue = {\n        email: '',\n        password: '',\n        passwordConfirm: '',\n        name: '',\n        region: '',\n        number: '',\n    }\n\n    const schemasForStepFirst = Yup.object().shape({\n        email: Yup.string()\n            .email()\n            .min(10, t('AuthForm.error.passwordMin'))\n            .max(63, t('AuthForm.error.passwordMax')),\n        password: Yup.string().required().min(7).max(32),\n        passwordConfirm: Yup.string().required(),\n    })\n\n    function validatePassword(value) {\n        let error\n        if (!value) {\n            error = t('AuthForm.error.passwordFalse')\n        } else if (value.includes(' ')) {\n            error = t('AuthForm.error.spaces')\n        }\n        return error\n    }\n\n    function validateEmail(value) {\n        let error\n        if (!value) {\n            error = t('AuthForm.error.emailFalse')\n        } else if (\n            !/^((([0-9A-Za-z]{1}[-0-9A-z.]{1,}[0-9A-Za-z]{1}))@([-A-Za-z]{1,}\\.){1,2}[-A-Za-z]{2,})$/i.test(\n                value\n            )\n        ) {\n            error = t('AuthForm.error.emailSymbol')\n        }\n        return error\n    }\n\n    const schemasForStepSecond = Yup.object().shape({\n        name: Yup.string().required(t('AuthForm.error.name')),\n        region: Yup.string().required(t('AuthForm.error.region')),\n        number: Yup.string()\n            .matches(/[0-9]/, t('AuthForm.error.numberFormat'))\n            .required(t('AuthForm.error.numberFalse'))\n            .min(9, t('AuthForm.error.numberMin'))\n            .max(9, t('AuthForm.error.numberMax')),\n    })\n\n    const schemasForLogin = Yup.object().shape({\n        email: Yup.string().email().required().min(10).max(63),\n        password: Yup.string().required().min(7).max(32),\n    })\n\n    const handleSubmitForRegister = (values, actions) => {\n        if (stepOne) {\n            if (values.password !== values.passwordConfirm) {\n                return Notify.failure(t('AuthForm.error.passwordsSameValue'), {\n                    timeout: 6000,\n                    distance: '100px',\n                    opacity: '0.8',\n                    useIcon: false,\n                    fontSize: '18px',\n                    borderRadius: '20px',\n                    showOnlyTheLastOne: true,\n                })\n            }\n            return setStepOne(false)\n        }\n        if (!stepOne) {\n            if (\n                !cities.find(\n                    city => `${city.city}, ${city.admin_name}` === values.region\n                )\n            ) {\n                return Notify.failure(t('AuthForm.error.regionList'), {\n                    timeout: 6000,\n                    distance: '100px',\n                    opacity: '0.8',\n                    useIcon: false,\n                    fontSize: '18px',\n                    borderRadius: '20px',\n                    showOnlyTheLastOne: true,\n                })\n            }\n\n            const user = {\n                email: values.email,\n                password: values.password,\n                name: values.name,\n                city: values.region,\n                phone: `380${values.number}`,\n            }\n            actions.resetForm()\n            setStepOne(true)\n            return dispatch(operations.registerNewUser(user))\n        }\n    }\n\n    const handleSubmitForLogin = (values, actions) => {\n        const user = {\n            email: values.email,\n            password: values.password,\n        }\n        actions.resetForm()\n        return onLogin(user)\n    }\n\n    const backButtonClick = () => {\n        if (!stepOne) {\n            return setStepOne(true)\n        }\n    }\n\n    const showPassword = () => {\n        return setOnShowPassword(!onShowPassword)\n    }\n    const showConfirmPassword = () => {\n        return setOnShowConfirmPassword(!onShowConfirmPassword)\n    }\n\n    const btnAuthVerify = (values, actions) => {\n        const user = {\n            email: values.email,\n            password: values.password,\n        }\n        actions.resetForm()\n        return dispatch(operations.authVerify(user))\n    }\n\n    const resetPassword = (values, actions) => {\n        const userEmail = {\n            email: values.email,\n        }\n        actions.resetForm()\n        return dispatch(operations.resetUserPassword(userEmail))\n    }\n\n    const handleSubmitForChangePassword = (values, actions) => {\n        if (values.password !== values.passwordConfirm) {\n            return Notify.failure(t('AuthForm.error.passwordsSameValue'), {\n                timeout: 6000,\n                distance: '100px',\n                opacity: '0.8',\n                useIcon: false,\n                fontSize: '18px',\n                borderRadius: '20px',\n                showOnlyTheLastOne: true,\n            })\n        }\n        const infoForUpdatePassword = {\n            userToken: tokenForResetPassword,\n            userNewPassword: {\n                password: values.password,\n            },\n        }\n        actions.resetForm()\n        setValuePassword('')\n        setValueConfirmPassword('')\n        setTokenForResetPassword('')\n        dispatch(operations.refreshPassword(infoForUpdatePassword))\n        return navigate('/login')\n    }\n\n    return (\n        <>\n            {loading && <Loader />}\n            {page === '/register' && (\n                <>\n                    {stepOne ? (\n                        <Formik\n                            validationSchema={schemasForStepFirst}\n                            initialValues={initialValue}\n                            onSubmit={handleSubmitForRegister}\n                        >\n                            <Form\n                                className={scss.form__container}\n                                autoComplete=\"off\"\n                                onChange={handleChangePassword}\n                            >\n                                <div className={scss.form__input_container}>\n                                    <Field\n                                        className={scss.form__input}\n                                        type=\"email\"\n                                        name=\"email\"\n                                        validate={validateEmail}\n                                        placeholder=\" \"\n                                    />\n                                    <label className={scss.form__label}>\n                                        {t('AuthForm.stepOne.email')}\n                                    </label>\n                                    <ErrorMessage\n                                        name=\"email\"\n                                        render={msg => (\n                                            <p className={scss.error__mesage}>\n                                                {msg}\n                                            </p>\n                                        )}\n                                    />\n                                </div>\n                                <div className={scss.form__input_container}>\n                                    <Field\n                                        className={scss.form__input}\n                                        type={\n                                            !onShowPassword\n                                                ? 'password'\n                                                : 'text'\n                                        }\n                                        name=\"password\"\n                                        validate={validatePassword}\n                                        placeholder=\" \"\n                                    />\n                                    <label className={scss.form__label}>\n                                        {t('AuthForm.stepOne.password')}\n                                    </label>\n                                    {valuePassword.length >= 1 && (\n                                        <span\n                                            className={\n                                                scss.form__input__password_show\n                                            }\n                                            onClick={showPassword}\n                                        >\n                                            {!onShowPassword ? (\n                                                <SvgInsert id=\"eye\" />\n                                            ) : (\n                                                <SvgInsert id=\"eye-blocked\" />\n                                            )}\n                                        </span>\n                                    )}\n                                    <ErrorMessage\n                                        name=\"password\"\n                                        render={msg => (\n                                            <p className={scss.error__mesage}>\n                                                {msg}\n                                            </p>\n                                        )}\n                                    />\n                                </div>\n                                <div className={scss.form__input_container}>\n                                    <Field\n                                        className={scss.form__input}\n                                        type={\n                                            !onShowConfirmPassword\n                                                ? 'password'\n                                                : 'text'\n                                        }\n                                        name=\"passwordConfirm\"\n                                        placeholder=\" \"\n                                        validate={validatePassword}\n                                    />\n                                    <label className={scss.form__label}>\n                                        {t('AuthForm.stepOne.passwordTwo')}\n                                    </label>\n                                    {valueConfirmPassword.length >= 1 && (\n                                        <span\n                                            className={\n                                                scss.form__input__password_show\n                                            }\n                                            onClick={showConfirmPassword}\n                                        >\n                                            {!onShowConfirmPassword ? (\n                                                <SvgInsert id=\"eye\" />\n                                            ) : (\n                                                <SvgInsert id=\"eye-blocked\" />\n                                            )}\n                                        </span>\n                                    )}\n                                    <ErrorMessage\n                                        name=\"passwordConfirm\"\n                                        render={msg => (\n                                            <p className={scss.error__mesage}>\n                                                {msg}\n                                            </p>\n                                        )}\n                                    />\n                                </div>\n                                <div className={scss.coordination__box}>\n                                    <Field\n                                        className={scss.coordination__box_input}\n                                        type=\"checkbox\"\n                                        name=\"coordination\"\n                                        id=\"coordination\"\n                                    />\n                                    <label\n                                        className={scss.coordination__box_title}\n                                        htmlFor=\"coordination\"\n                                    >\n                                        {t('AuthForm.stepOne.confirm')}{' '}\n                                        <a\n                                            href=\"https://www.google.com.ua/\"\n                                            className={\n                                                scss.coordination__box_link\n                                            }\n                                            target=\"_blank\"\n                                            rel=\"noopener noreferrer\"\n                                        >\n                                            {t('AuthForm.stepOne.confirmLink')}\n                                        </a>\n                                    </label>\n                                </div>\n                                <button\n                                    className={`${scss.button__primary_main} ${scss.form__button}`}\n                                    type=\"submit\"\n                                    disabled={!coordination}\n                                >\n                                    {t('AuthForm.stepOne.btnNext')}\n                                </button>\n                                <GoogleAuth />\n                            </Form>\n                        </Formik>\n                    ) : (\n                        <Formik\n                            validationSchema={schemasForStepSecond}\n                            initialValues={initialValue}\n                            onSubmit={handleSubmitForRegister}\n                            autoComplete=\"off\"\n                        >\n                            <Form className={scss.form__container}>\n                                <div className={scss.form__input_container}>\n                                    <Field\n                                        className={scss.form__input}\n                                        type=\"text\"\n                                        name=\"name\"\n                                        placeholder=\" \"\n                                        required\n                                    />\n                                    <label className={scss.form__label}>\n                                        {t('AuthForm.stepTwo.name')}\n                                    </label>\n                                    <ErrorMessage\n                                        name=\"name\"\n                                        render={msg => (\n                                            <p className={scss.error__mesage}>\n                                                {msg}\n                                            </p>\n                                        )}\n                                    />\n                                </div>\n                                <div className={scss.form__input_container}>\n                                    <Field\n                                        className={scss.form__input}\n                                        name=\"region\"\n                                        list=\"region\"\n                                        type=\"text\"\n                                        placeholder=\" \"\n                                    />\n                                    <datalist id=\"region\">\n                                        {cities.map(city => (\n                                            <option\n                                                key={`${city.city}.${city.lat}`}\n                                            >\n                                                {city.city}, {city.admin_name}\n                                            </option>\n                                        ))}\n                                    </datalist>\n                                    <label className={scss.form__label}>\n                                        {t('AuthForm.stepTwo.cityRegion')}\n                                    </label>\n                                    <ErrorMessage\n                                        name=\"region\"\n                                        render={msg => (\n                                            <p className={scss.error__mesage}>\n                                                {msg}\n                                            </p>\n                                        )}\n                                    />\n                                </div>\n                                <div className={scss.form__input_container}>\n                                    <Field\n                                        className={`${scss.form__input} ${scss.form__input_phone}`}\n                                        type=\"tel\"\n                                        name=\"number\"\n                                        placeholder=\" \"\n                                    />\n                                    <span className={scss.form__input_number}>\n                                        <svg\n                                            xmlns=\"http://www.w3.org/2000/svg\"\n                                            width=\"25\"\n                                            height=\"20\"\n                                        >\n                                            <rect\n                                                width=\"25\"\n                                                height=\"10\"\n                                                fill=\"#005BBB\"\n                                            />\n                                            <rect\n                                                width=\"25\"\n                                                height=\"10\"\n                                                y=\"10\"\n                                                fill=\"#FFD500\"\n                                            />\n                                        </svg>\n                                        <p>+380</p>\n                                    </span>\n                                    <label className={scss.form__label}>\n                                        {t('AuthForm.stepTwo.phone')}\n                                    </label>\n                                    <ErrorMessage\n                                        name=\"number\"\n                                        render={msg => (\n                                            <p className={scss.error__mesage}>\n                                                {msg}\n                                            </p>\n                                        )}\n                                    />\n                                </div>\n                                <span\n                                    className={`${scss.button__primary_not_main} ${scss.form__back_button}`}\n                                    onClick={backButtonClick}\n                                >\n                                    &#5130; {t('AuthForm.stepTwo.btnBack')}\n                                </span>\n                                <button\n                                    className={`${scss.button__primary_main} ${scss.form__button}`}\n                                    type=\"submit\"\n                                >\n                                    {t('AuthForm.stepTwo.btnRegister')}\n                                </button>\n                                <GoogleAuth />\n                            </Form>\n                        </Formik>\n                    )}\n                    <p className={scss.form__description}>\n                        {t('AuthForm.haveAccount')}{' '}\n                        <NavLink className={scss.description__nav} to=\"/login\">\n                            {t('AuthForm.login')}\n                        </NavLink>\n                    </p>\n                </>\n            )}\n            {page === '/login' && (\n                <>\n                    <Formik\n                        validationSchema={schemasForLogin}\n                        initialValues={initialValue}\n                        onSubmit={handleSubmitForLogin}\n                    >\n                        <Form\n                            className={scss.form__container}\n                            autoComplete=\"off\"\n                            onChange={handleChangePassword}\n                        >\n                            <div className={scss.form__input_container}>\n                                <Field\n                                    className={scss.form__input}\n                                    type=\"email\"\n                                    name=\"email\"\n                                    placeholder=\" \"\n                                />\n                                <label className={scss.form__label}>\n                                    {t('LoginForm.email')}\n                                </label>\n                                <ErrorMessage\n                                    name=\"email\"\n                                    render={msg => (\n                                        <p className={scss.error__mesage}>\n                                            {msg}\n                                        </p>\n                                    )}\n                                />\n                            </div>\n                            <div className={scss.form__input_container}>\n                                <Field\n                                    className={`${scss.form__input} ${scss.form__login__input}`}\n                                    type={!onShowPassword ? 'password' : 'text'}\n                                    name=\"password\"\n                                    placeholder=\" \"\n                                    validate={validatePassword}\n                                />\n                                <label className={scss.form__label}>\n                                    {t('LoginForm.password')}\n                                </label>\n                                {valuePassword.length >= 1 && (\n                                    <span\n                                        className={\n                                            scss.form__input__password_show\n                                        }\n                                        onClick={showPassword}\n                                    >\n                                        {!onShowPassword ? (\n                                            <SvgInsert id=\"eye\" />\n                                        ) : (\n                                            <SvgInsert id=\"eye-blocked\" />\n                                        )}\n                                    </span>\n                                )}\n                                <ErrorMessage\n                                    name=\"password\"\n                                    render={msg => (\n                                        <p className={scss.error__mesage}>\n                                            {msg}\n                                        </p>\n                                    )}\n                                />\n                            </div>\n                            <button\n                                className={`${scss.button__primary_main} ${scss.form__button}`}\n                                type=\"submit\"\n                            >\n                                {t('LoginForm.btnLogin')}\n                            </button>\n                            <p className={scss.form__description}>\n                                {t('LoginForm.resendVerification')}{' '}\n                                <NavLink\n                                    to=\"/verify\"\n                                    className={scss.description__nav}\n                                >\n                                    {t('LoginForm.here')}\n                                </NavLink>\n                            </p>\n                            <p\n                                className={`${scss.form__description} ${scss.form__description_reset}`}\n                            >\n                                {t('LoginForm.forgotPassword')}{' '}\n                                <NavLink\n                                    to=\"/reset-password\"\n                                    className={scss.description__nav}\n                                >\n                                    {t('LoginForm.here')}\n                                </NavLink>\n                            </p>\n                            <GoogleAuth />\n                        </Form>\n                    </Formik>\n                    <p className={scss.form__description}>\n                        {t('LoginForm.notAccount')}{' '}\n                        <NavLink\n                            to=\"/register\"\n                            className={scss.description__nav}\n                        >\n                            {t('LoginForm.register')}\n                        </NavLink>\n                    </p>\n                </>\n            )}\n            {page === '/verify' && (\n                <>\n                    <Formik\n                        validationSchema={schemasForLogin}\n                        initialValues={initialValue}\n                        onSubmit={btnAuthVerify}\n                    >\n                        <Form\n                            className={scss.form__container}\n                            autoComplete=\"off\"\n                            onChange={handleChangePassword}\n                        >\n                            <div className={scss.form__input_container}>\n                                <Field\n                                    className={scss.form__input}\n                                    type=\"email\"\n                                    name=\"email\"\n                                    placeholder=\" \"\n                                />\n                                <label className={scss.form__label}>\n                                    {t('VerifyForm.email')}\n                                </label>\n                                <ErrorMessage\n                                    name=\"email\"\n                                    render={msg => (\n                                        <p className={scss.error__mesage}>\n                                            {msg}\n                                        </p>\n                                    )}\n                                />\n                            </div>\n                            <div className={scss.form__input_container}>\n                                <Field\n                                    className={`${scss.form__input} ${scss.form__login__input}`}\n                                    type=\"password\"\n                                    name=\"password\"\n                                    placeholder=\" \"\n                                    validate={validatePassword}\n                                />\n                                <label className={scss.form__label}>\n                                    {t('VerifyForm.password')}\n                                </label>\n                                {valuePassword.length >= 1 && (\n                                    <span\n                                        className={\n                                            scss.form__input__password_show\n                                        }\n                                        onClick={showPassword}\n                                    >\n                                        {!onShowPassword ? (\n                                            <SvgInsert id=\"eye\" />\n                                        ) : (\n                                            <SvgInsert id=\"eye-blocked\" />\n                                        )}\n                                    </span>\n                                )}\n                                <ErrorMessage\n                                    name=\"password\"\n                                    render={msg => (\n                                        <p className={scss.error__mesage}>\n                                            {msg}\n                                        </p>\n                                    )}\n                                />\n                            </div>\n\n                            <button\n                                className={`${scss.button__primary_main} ${scss.form__button}`}\n                                type=\"submit\"\n                            >\n                                {t('VerifyForm.verify')}\n                            </button>\n                        </Form>\n                    </Formik>\n\n                    <p className={scss.form__description}>\n                        {t('VerifyForm.back')}{' '}\n                        <NavLink to=\"/login\" className={scss.description__nav}>\n                            {t('VerifyForm.login')}\n                        </NavLink>\n                    </p>\n                </>\n            )}\n            {page === '/reset-password' && (\n                <>\n                    <Formik\n                        initialValues={initialValue}\n                        onSubmit={resetPassword}\n                    >\n                        <Form className={scss.form__container}>\n                            <p className={scss.form__description_recover}>\n                                {t('ResetPasswordForm.title')}\n                            </p>\n                            <div className={scss.form__input_container}>\n                                <Field\n                                    className={scss.form__input}\n                                    type=\"email\"\n                                    name=\"email\"\n                                    placeholder=\" \"\n                                    validate={validateEmail}\n                                />\n                                <label className={scss.form__label}>\n                                    {t('ResetPasswordForm.email')}\n                                </label>\n                                <ErrorMessage\n                                    name=\"email\"\n                                    render={msg => (\n                                        <p className={scss.error__mesage}>\n                                            {msg}\n                                        </p>\n                                    )}\n                                />\n                            </div>\n                            <button\n                                className={`${scss.button__primary_main} ${scss.form__button}`}\n                                type=\"submit\"\n                            >\n                                {t('ResetPasswordForm.resetPassword')}\n                            </button>\n                        </Form>\n                    </Formik>\n\n                    <p className={scss.form__description}>\n                        {t('ResetPasswordForm.back')}{' '}\n                        <NavLink to=\"/login\" className={scss.description__nav}>\n                            {t('ResetPasswordForm.login')}\n                        </NavLink>\n                    </p>\n                </>\n            )}\n            {page !== '/register' &&\n                page !== '/login' &&\n                page !== '/verify' &&\n                page !== '/reset-password' && (\n                    <Formik\n                        validationSchema={schemasForStepFirst}\n                        initialValues={initialValue}\n                        onSubmit={handleSubmitForChangePassword}\n                    >\n                        <Form\n                            className={scss.form__container}\n                            autoComplete=\"off\"\n                            onChange={handleChangePassword}\n                        >\n                            <div className={scss.form__input_container}>\n                                <Field\n                                    className={scss.form__input}\n                                    type={!onShowPassword ? 'password' : 'text'}\n                                    name=\"password\"\n                                    validate={validatePassword}\n                                    placeholder=\" \"\n                                />\n                                <label className={scss.form__label}>\n                                    {t('changePasswordForm.password')}\n                                </label>\n                                {valuePassword.length >= 1 && (\n                                    <span\n                                        className={\n                                            scss.form__input__password_show\n                                        }\n                                        onClick={showPassword}\n                                    >\n                                        {!onShowPassword ? (\n                                            <SvgInsert id=\"eye\" />\n                                        ) : (\n                                            <SvgInsert id=\"eye-blocked\" />\n                                        )}\n                                    </span>\n                                )}\n                                <ErrorMessage\n                                    name=\"password\"\n                                    render={msg => (\n                                        <p className={scss.error__mesage}>\n                                            {msg}\n                                        </p>\n                                    )}\n                                />\n                            </div>\n                            <div className={scss.form__input_container}>\n                                <Field\n                                    className={scss.form__input}\n                                    type={\n                                        !onShowConfirmPassword\n                                            ? 'password'\n                                            : 'text'\n                                    }\n                                    name=\"passwordConfirm\"\n                                    placeholder=\" \"\n                                    validate={validatePassword}\n                                />\n                                <label className={scss.form__label}>\n                                    {t('changePasswordForm.confirmPassword')}\n                                </label>\n                                {valueConfirmPassword.length >= 1 && (\n                                    <span\n                                        className={\n                                            scss.form__input__password_show\n                                        }\n                                        onClick={showConfirmPassword}\n                                    >\n                                        {!onShowConfirmPassword ? (\n                                            <SvgInsert id=\"eye\" />\n                                        ) : (\n                                            <SvgInsert id=\"eye-blocked\" />\n                                        )}\n                                    </span>\n                                )}\n                                <ErrorMessage\n                                    name=\"passwordConfirm\"\n                                    render={msg => (\n                                        <p className={scss.error__mesage}>\n                                            {msg}\n                                        </p>\n                                    )}\n                                />\n                            </div>\n                            <button\n                                className={`${scss.button__primary_main} ${scss.form__button}`}\n                                type=\"submit\"\n                            >\n                                {t('changePasswordForm.changePassword')}\n                            </button>\n                        </Form>\n                    </Formik>\n                )}\n        </>\n    )\n}\n\nexport default AuthForm\n"],"names":["REACT_APP_BASE_URL","process","isActive","useSelector","state","menu","menuActive","dispatch","useDispatch","t","useTranslation","className","scss","href","onClick","setMenuActive","Svg","id","useState","stepOne","setStepOne","onShowPassword","setOnShowPassword","onShowConfirmPassword","setOnShowConfirmPassword","coordination","setCoordination","valuePassword","setValuePassword","valueConfirmPassword","setValueConfirmPassword","tokenForResetPassword","setTokenForResetPassword","page","useLocation","pathname","token","useParams","navigate","useNavigate","useEffect","handleChangePassword","e","target","name","value","checked","loading","auth","initialValue","email","password","passwordConfirm","region","number","schemasForStepFirst","Yup","shape","min","max","required","validatePassword","error","includes","validateEmail","test","schemasForStepSecond","matches","schemasForLogin","handleSubmitForRegister","values","actions","Notify","timeout","distance","opacity","useIcon","fontSize","borderRadius","showOnlyTheLastOne","cities","city","admin_name","user","phone","resetForm","operations","showPassword","showConfirmPassword","Loader","validationSchema","initialValues","onSubmit","autoComplete","onChange","type","validate","placeholder","render","msg","length","htmlFor","rel","disabled","list","lat","xmlns","width","height","fill","y","to","data","userEmail","infoForUpdatePassword","userToken","userNewPassword"],"sourceRoot":""}